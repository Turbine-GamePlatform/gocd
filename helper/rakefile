##########################GO-LICENSE-START################################
# Copyright 2014 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################GO-LICENSE-END##################################

require 'rake/clean'

require 'pathname'

require 'rexml/document'
require File.join(File.expand_path(File.dirname(__FILE__)), File.join('builder', 'element_handler'))
require File.join(File.expand_path(File.dirname(__FILE__)), File.join('builder', 'topic_handler'))
require File.join(File.expand_path(File.dirname(__FILE__)), File.join('builder', 'toc_handler'))
require File.join(File.expand_path(File.dirname(__FILE__)), File.join('builder', 'topic_maker'))
require File.join(File.expand_path(File.dirname(__FILE__)), File.join('builder', 'html_renderer'))
require 'find'

BUILD_DIR = 'build'
TOPIC_DIR = 'topics'
SRC=FileList["#{TOPIC_DIR}/*.xml"]
INDEX_HTML="#{BUILD_DIR}/index.html"

TEMP_DIR = "#{BUILD_DIR}/temp"
IMAGES_DIR = "#{BUILD_DIR}/images"
STYLES_DIR = "#{BUILD_DIR}/stylesheets"
RESOURCES_DIR = "#{BUILD_DIR}/resources"
CONFDOC_DIR = 'conf-docs'
GOOGLE_SITE_VERIFICATION_FILE = "googlec856c43d6572cf57.html"

SUBSTITUTIONS = {
  :tw_studios_mingle_support_url => 'http://support.thoughtworks.com',
  :tw_studios_mingle_video_url => 'http://studios.thoughtworks.com'
}

CLEAN.include(BUILD_DIR)

rule /#{BUILD_DIR}\/.*\.html/ => proc {|t| t.pathmap("#{TEMP_DIR}/%n.xml")} do |t|
    puts "Generating...#{t.name}"
    TopicMaker.new(t.source, 'cruise_help_index.xml', BUILD_DIR).run
end

rule INDEX_HTML => "#{BUILD_DIR}/welcome_to_go.html" do |t|
    puts "Generating...#{t.name}"
    cp t.source,t.name
end

rule /#{TEMP_DIR}\/.*\.xml/ => proc {|t| t.pathmap("#{TOPIC_DIR}/%n.xml")} do |t|
    subst =File.open(t.name,'w')
    File.open(t.source).each do |line|
       SUBSTITUTIONS.each{|k, v| line.gsub!(/@#{k}@/, v)}
       line.gsub!(/\t/, '  ')
       subst << line
   end
   subst.close
end

directory BUILD_DIR
directory TEMP_DIR
directory IMAGES_DIR
directory STYLES_DIR
directory RESOURCES_DIR

task :moveconfigdocs => [IMAGES_DIR,STYLES_DIR] do
  cp"#{CONFDOC_DIR}/configuration_reference.html", "#{BUILD_DIR}/configuration_reference.html"
  cp_r("#{CONFDOC_DIR}/images", BUILD_DIR)
  cp_r("#{CONFDOC_DIR}/stylesheets", BUILD_DIR)
  cp File.join(CONFDOC_DIR, GOOGLE_SITE_VERIFICATION_FILE), File.join(BUILD_DIR, GOOGLE_SITE_VERIFICATION_FILE)
end

task :resources => RESOURCES_DIR do
    cp_r('resources', BUILD_DIR)
    cp('../config/config-server/resources/cruise-config.xsd', BUILD_DIR + '/resources')
end

task :build_sitemap do
  go_version = ENV['GO_VERSION']
  if go_version.nil? || go_version.empty?
    warning_message = "sitemap.xml will not be generated until GO_VERSION is set"
    puts "*" * warning_message.length
    puts "GO_VERSION is not set. For e.g., GO_VERSION=13.2.2"
    puts warning_message
    puts "*" * warning_message.length
  else
    prefix_url = "http://www.thoughtworks.com/products/docs/go/#{go_version}/help"
    build_site_map BUILD_DIR, prefix_url
  end
end

namespace :docs do
    SRC.each do |xml_file|
        target = xml_file.gsub(/#{TOPIC_DIR}/,BUILD_DIR).gsub(/xml/,'html')
        temp_xml = xml_file.gsub(/#{TOPIC_DIR}/,TEMP_DIR)
        file temp_xml => xml_file
        file target => temp_xml
        task :default => [TEMP_DIR,target,INDEX_HTML]
    end
end

desc "Generates documenation based on changed files only."
task :default => [BUILD_DIR,:resources,'docs:default',:moveconfigdocs]

desc "Generates the complete documentation for Go"
task :site => [:clean,:default] do
    rm_rf(TEMP_DIR)
end

def build_site_map build_dir, prefix_url
  File.open("#{build_dir}/sitemap.xml", 'w') do |fd|
    fd.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
    fd.write("<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n")
    Find.find("#{build_dir}") do |file|
      if file=~/.html$/
      	mod_date = File.ctime(file)
      	file = file.gsub"./",""
      	file_name = File.basename(file)
        puts "Generating sitemap for... #{file_name}"
        fd.write("<url>\n")
        fd.write("<loc>#{prefix_url}/#{file_name}</loc>\n")
        fd.write("<lastmod>#{mod_date.strftime("%Y-%m-%dT%H:%M:%S+00:00")}</lastmod>\n")
        fd.write("<changefreq>never</changefreq>\n")
        fd.write("</url>\n")
      end
    end
    fd.write("</urlset>")
  end
end
