<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE topic SYSTEM "cruise_help.dtd">
<topic title="Materials API">
    <p>
        APIs that notify Go Server when a commit has been made in Version Control and Go needs to trigger relevant pipelines.
    </p>
    <note>
        <strong>NOTE</strong>: Only Go Administrators will be able to invoke this API
    </note>
    <section title="Subversion" collapsed="true">
        <table caption="Parameters">
            <header-row>
                <col-header>URL format</col-header>
                <col-header>HTTP Verb</col-header>
                <col-header>Data</col-header>
                <col-header>Explanation</col-header>
            </header-row>
            <row>
                <col>http://[server]:[port]/go/api/material/notify/svn</col>
                <label>POST</label>
                <col>uuid=[subversion repository UUID]</col>
                <col>Notifies Go that a commit has been made to a subversion repository with the given UUID</col>
            </row>
        </table>
	<note>When using this feature, un-check <strong>Poll for new changes</strong> or set <strong>autoUpdate</strong> flag in cruise configuration to <strong>false</strong> for the relevant subversion materials</note>
        <subsection title="Examples">
            <bullets>
                <item>We use curl, a command line tool for transferring files with URL syntax, in the following examples. Of course, you can use any HTTP client library.</item>
                <item>We assume that the URL of the Go server is<strong>http://goserver.com:8153/</strong>.
                </item>
                <item>We assume security has been switched on, and that there is an admin user named
                    <strong>admin</strong>
                    with the password<strong>password</strong>.
                </item>
            </bullets>

            <p>To notify Go via SVN post commit hook</p>
            <code>
                # File: [sub-version-repository]/hooks/post-commit
                # ================================================
                #!/bin/sh

                # POST-COMMIT HOOK
                #

                REPOS="$1"
                REV="$2"
                UUID=`svnlook uuid $1`

                curl -d "uuid=$UUID" -u admin:password http://goserver.com:8153/go/api/material/notify/svn
            </code>
        </subsection>
    </section>

    <section title="Git" collapsed="true">
        <table caption="Parameters">
            <header-row>
                <col-header>URL format</col-header>
                <col-header>HTTP Verb</col-header>
                <col-header>Data</col-header>
                <col-header>Explanation</col-header>
            </header-row>
            <row>
                <col>http://[server]:[port]/go/api/material/notify/git</col>
                <label>POST</label>
                <col>repository_url=[URL of this repository configured in Go]</col>
                <col>Notifies Go that a commit has been made to a git repository with the given URL</col>
            </row>
        </table>
        <note>When using this feature, un-check <strong>Poll for new changes</strong> or set <strong>autoUpdate</strong> flag in cruise configuration to <strong>false</strong> for the relevant git materials</note>
        <subsection title="Examples">
            <bullets>
                <item>We use curl, a command line tool for transferring files with URL syntax, in the following examples. Of course, you can use any HTTP client library.</item>
                <item>We assume that the URL of the Go server is<strong>http://goserver.com:8153/</strong>.
                </item>
                <item>We assume security has been switched on, and that there is an admin user named
                    <strong>admin</strong>
                    with the password<strong>password</strong>.
                </item>
            </bullets>

            <p>To notify Go via Git post commit hook</p>
            <code>
                # File: [git-repository]/hooks/post-receive
                # ================================================
                #!/bin/sh

                # POST-RECEIVE HOOK
                #

                echo `curl -d "repository_url=http://url-for-git-repo.git" -u admin:badger http://goserver.com:8153/go/api/material/notify/git`
                echo `curl -d "repository_url=git://url-for-git-repo.git" -u admin:badger http://goserver.com:8153/go/api/material/notify/git`
                echo `curl -d "repository_url=https://url-for-git-repo.git" -u admin:badger http://goserver.com:8153/go/api/material/notify/git`
            </code>
        </subsection>
    </section>

</topic>
